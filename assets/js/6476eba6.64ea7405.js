"use strict";(self.webpackChunklocal_file_preferences_docs=self.webpackChunklocal_file_preferences_docs||[]).push([[827],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=l,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const i={sidebar_position:2},r="Note",o={unversionedId:"usage",id:"usage",title:"Note",description:"- If a class mixed in with LocalFilePrefMixin, then it can be used as ValueNotifier. LocalFilePrevMixin implements all ValueNotifier methods with internal ValueNotifier delegate.",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/flutter-local-file-preferences/docs/usage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/flutter-local-file-preferences/docs/install"}},s={},c=[{value:"1. Register global <code>Storage</code>",id:"1-register-global-storage",level:2},{value:"2. Mix in your class with <code>LocalFilePrefMixin</code>",id:"2-mix-in-your-class-with-localfileprefmixin",level:2},{value:"<code>T get fallback</code>",id:"t-get-fallback",level:3},{value:"<code>String get fileName</code>",id:"string-get-filename",level:3},{value:"<code>Map&lt;String, dynamic&gt; toJson()</code>",id:"mapstring-dynamic-tojson",level:3},{value:"<code>T fromJson(Map&lt;String, dynamic&gt; json)</code>",id:"t-fromjsonmapstring-dynamic-json",level:3},{value:"<code>storage</code> (Optional)",id:"storage-optional",level:3},{value:"Example",id:"example",level:3},{value:"3. <code>LocalFilePrefMixin</code> API",id:"3-localfileprefmixin-api",level:2},{value:"<code>T value</code>",id:"t-value",level:3},{value:"<code>ValueNotifier&lt;T&gt; data</code>",id:"valuenotifiert-data",level:3},{value:"<code>T load()</code>",id:"t-load",level:3},{value:"<code>Futuer&lt;void&gt; save()</code>",id:"futuervoid-save",level:3},{value:"<code>void scheduleSave()</code>",id:"void-schedulesave",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"note"},"Note"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If a class mixed in with ",(0,l.kt)("inlineCode",{parentName:"li"},"LocalFilePrefMixin"),", then it can be used as ",(0,l.kt)("inlineCode",{parentName:"li"},"ValueNotifier"),". ",(0,l.kt)("inlineCode",{parentName:"li"},"LocalFilePrevMixin")," implements all ",(0,l.kt)("inlineCode",{parentName:"li"},"ValueNotifier")," methods with internal ",(0,l.kt)("inlineCode",{parentName:"li"},"ValueNotifier")," delegate.")),(0,l.kt)("h1",{id:"usage"},"Usage"),(0,l.kt)("h2",{id:"1-register-global-storage"},"1. Register global ",(0,l.kt)("inlineCode",{parentName:"h2"},"Storage")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Storage")," is content provider of your local file."),(0,l.kt)("p",null,"We provide ",(0,l.kt)("inlineCode",{parentName:"p"},"SharedPreferencesStorage")," class."),(0,l.kt)("p",null,"You can use it like that in the very first of application bootstrap."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0fRun ",(0,l.kt)("inlineCode",{parentName:"p"},"registerGlobalStorage")," before any usage of ",(0,l.kt)("inlineCode",{parentName:"p"},"LocalFilePrefMixin"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:local_file_preferences/local_file_preferences.dart';\n\nvoid main() async {\n  var sharedPreferences = await SharedPreferences.getInstance();\n  registerGlobalStorage(\n    SharedPreferencesStorage(sharedPreferences: sharedPreferences)\n  );\n}\n")),(0,l.kt)("p",null,"Or you can create your own local file content provider by implementing ",(0,l.kt)("inlineCode",{parentName:"p"},"Storage")," directly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"class MyStorage implements Storage {\n  @override\n  String? getString(String key) {\n    ...\n  }\n\n  @override\n  Future<void> setString(String key, String value) {\n    ...\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Storage")," interface is simple to implement."),(0,l.kt)("h2",{id:"2-mix-in-your-class-with-localfileprefmixin"},"2. Mix in your class with ",(0,l.kt)("inlineCode",{parentName:"h2"},"LocalFilePrefMixin")),(0,l.kt)("p",null,"For example,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"class L10NSettings with LocalFilePrefMixin<L10NSettingsValue>\n")),(0,l.kt)("p",null,"There are methods must be implement."),(0,l.kt)("h3",{id:"t-get-fallback"},(0,l.kt)("inlineCode",{parentName:"h3"},"T get fallback")),(0,l.kt)("p",null,"Provide your data fallback for when mixin can't load local file(maybe first install)."),(0,l.kt)("h3",{id:"string-get-filename"},(0,l.kt)("inlineCode",{parentName:"h3"},"String get fileName")),(0,l.kt)("p",null,"The file name of preferences file in the local file system."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"e.g.)",(0,l.kt)("inlineCode",{parentName:"p"}," my_data.dat"))),(0,l.kt)("h3",{id:"mapstring-dynamic-tojson"},(0,l.kt)("inlineCode",{parentName:"h3"},"Map<String, dynamic> toJson()")),(0,l.kt)("p",null,"Provide convert method from your data to json."),(0,l.kt)("h3",{id:"t-fromjsonmapstring-dynamic-json"},(0,l.kt)("inlineCode",{parentName:"h3"},"T fromJson(Map<String, dynamic> json)")),(0,l.kt)("p",null,"Provide convert method from json to your data. "),(0,l.kt)("h3",{id:"storage-optional"},(0,l.kt)("inlineCode",{parentName:"h3"},"storage")," (Optional)"),(0,l.kt)("p",null,"Provide storage if you need differentiate local file content provider."),(0,l.kt)("p",null,"The default ",(0,l.kt)("inlineCode",{parentName:"p"},"storage")," is set by ",(0,l.kt)("inlineCode",{parentName:"p"},"registerGlobalStorage"),"."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"enum L10NSettingsValue {\n  enUS(Locale('en', 'US')),\n  ko(Locale('ko')),\n  ;\n\n  final Locale locale;\n  const L10NSettingsValue(this.locale);\n}\n\nclass L10NSettings with LocalFilePrefMixin<L10NSettingsValue> {\n  @override\n  L10NSettingsValue get fallback =>\n      Intl.getCurrentLocale().startsWith('en') ? L10NSettingsValue.enUS : L10NSettingsValue.ko;\n\n  @override\n  String get fileName => 'L10N_settings.dat';\n\n  @override\n  Json toJson() => {'locale': value.name};\n\n  @override\n  L10NSettingsValue fromJson(Json json) =>\n      L10NSettingsValue.values.firstWhereOrNull((element) => element.name == json['locale']) ??\n      L10NSettingsValue.enUS;\n}\n\n")),(0,l.kt)("h2",{id:"3-localfileprefmixin-api"},"3. ",(0,l.kt)("inlineCode",{parentName:"h2"},"LocalFilePrefMixin")," API"),(0,l.kt)("h3",{id:"t-value"},(0,l.kt)("inlineCode",{parentName:"h3"},"T value")),(0,l.kt)("p",null,"Value of your data(getter, setter)."),(0,l.kt)("h3",{id:"valuenotifiert-data"},(0,l.kt)("inlineCode",{parentName:"h3"},"ValueNotifier<T> data")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ValueNotifier")," wrapper of your data."),(0,l.kt)("h3",{id:"t-load"},(0,l.kt)("inlineCode",{parentName:"h3"},"T load()")),(0,l.kt)("p",null,"Load your data from local file. This can be returnned null if there is no saved local file."),(0,l.kt)("p",null,"This is called at first of initialization automatically."),(0,l.kt)("h3",{id:"futuervoid-save"},(0,l.kt)("inlineCode",{parentName:"h3"},"Futuer<void> save()")),(0,l.kt)("p",null,"Save current data to local file"),(0,l.kt)("h3",{id:"void-schedulesave"},(0,l.kt)("inlineCode",{parentName:"h3"},"void scheduleSave()")),(0,l.kt)("p",null,"Schedule save with throttling(2 seconds)."),(0,l.kt)("p",null,"This is useful for situation that you should save intensively."))}p.isMDXComponent=!0}}]);